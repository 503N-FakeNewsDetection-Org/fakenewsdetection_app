name: Evaluate Text Shadow Model

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * 1'

jobs:
  evaluate:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      PROM_URL:  ${{ secrets.PROM_URL }}
      AZ_CONN:   ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
      CONTAINER: fakenewsdetection-models
      SHADOW_BLOB: shadow_model.pt
      PROD_BLOB:   model.pt
      SERVICE:     text

    steps:
    - name: Install python deps
      run: pip install --quiet requests azure-storage-blob

    - name: Evaluate metrics & promote if OK
      run: |
        python - <<'PY'
        import os, sys, requests, json
        from azure.storage.blob import BlobServiceClient
        from azure.core.exceptions import ResourceNotFoundError
        prom   = os.environ["PROM_URL"].rstrip("/")
        svc    = BlobServiceClient.from_connection_string(os.environ["AZ_CONN"]).get_container_client(os.environ["CONTAINER"])
        service= os.environ["SERVICE"]

        def q(expr):
            r = requests.get(f"{prom}/api/v1/query", params={"query": expr}, timeout=30)
            r.raise_for_status()
            res = r.json()["data"]["result"]
            return 0 if not res else float(res[0]["value"][1])

        prod     = increase(model_inferences_total{job="{service}", role="prod"}[1d])
        shadow   = increase(shadow_inferences_total{job="{service}"}[1d])
        agreePct = increase(shadow_agree_total{job="{service}"}[1d])


        print(f"prod={prod}  shadow={shadow}  agree={agree}")
        if prod == 0 or shadow == 0:
            print("No traffic yet – skipping"); sys.exit(0)

        counts_ok   = abs(prod - shadow) / prod <= 0.02     # ≤2 % diff
        agreement   = agreePct / shadow if shadow else 0
        agreement_ok= agreement >= 0.85

        print(f"counts_ok={counts_ok}  agreement={agreement:.2%}  agreement_ok={agreement_ok}")

        shadow_blob = os.environ["SHADOW_BLOB"]
        prod_blob   = os.environ["PROD_BLOB"]

        if counts_ok and agreement_ok:
            print("PROMOTING shadow model → production blob")
            data = svc.download_blob(shadow_blob).readall()
            svc.upload_blob(prod_blob, data, overwrite=True)
        else:
            print("Deleting shadow blob (did not meet criteria)")
            try: svc.delete_blob(shadow_blob)
            except ResourceNotFoundError: pass
        PY

    - name: Switch live service back to prod
      run: |
        curl -sSL -X POST "$GATEWAY/admin/text/role" \
            -H "Content-Type: application/json" \
              -H "x-token: ${{ secrets.ADMIN_TOKEN }}" \
              --data '{"role":"prod"}'
      env:
        GATEWAY: ${{ secrets.GATEWAY_URL }} 